generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  phone     String?
  role      String   @default("patient")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
}

model Doctor {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  slug              String   @unique
  name              String
  email             String   @unique
  password          String
  specialty         String
  qualification     String
  profileImage      String
  phone             String
  address           String
  dob               String?
  gender            String?
  consultationFee   Int?
  yearsOfExperience Int?
  totalAppointments Int?     @default(0)
  role              String   @default("doctor")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  doctorHelpers DoctorHelper[]
  appointments  Appointment[]
  schedules     Schedule[]
}

model DoctorHelper {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  slug         String   @unique
  doctorId     String   @db.ObjectId
  name         String
  email        String   @unique
  password     String
  profileImage String
  role         String   @default("doctor-helper")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Appointment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId String   @db.ObjectId
  doctorId  String   @db.ObjectId
  date      String
  time      String
  subject   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Schedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  doctorId  String   @unique @db.ObjectId
  entries   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}
